
CREATE DATABASE TechShop;


USE TechShop;


CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    Phone VARCHAR(20),
    Address VARCHAR(255)
);


CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price double);


CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount double,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

CREATE TABLE Inventory (
    InventoryID INT PRIMARY KEY,
    ProductID INT,
    QuantityInStock INT,
    LastStockUpdate DATETIME,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Phone, Address) 
VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890', '123 Main St'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '987-654-3210', '456 Elm St'),
(3, 'Ronald', 'Weasely', 'ronald@example.com', '666-555-5555', '89 Oak St'),
(4, 'Hermione', 'Granger', 'hermione@example.com', '777-555-5555', '789 Oa St'),
(5, 'Grace', 'Burgess', 'grace@example.com', '888-555-5555', '9 East St'),
(6, 'May', 'Carleton', 'may@example.com', '999-555-5555', '7 West St'),
(7, 'Paul', 'Anderson', 'paul@example.com', '000-555-5555', '23 Second St'),
(8, 'Alice', 'Johnson', 'alice.johnson@example.com', '555-555-5555', '45 First St');

INSERT INTO Products (ProductID, ProductName, Description, Price) 
VALUES
(1, 'Laptop', '15" Laptop', 50000),
(2, 'Smartphone', '6.5" Smartphone', 25000),
(3, 'Tablet', '10" Tablet', 30000),
(4, 'SmartWatch', '10" Tablet', 5000),
(5, 'Earbuds', '10" Tablet', 4000),
(6, 'Headphones', '10" Tablet', 1000);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) 
VALUES
(1, 1, '2024-03-06', 50000),
(2, 2, '2022-01-16', 25000),
(3, 2, '2023-05-04', 1000),
(4, 3, '2021-02-26', 30000),
(5, 4, '2024-06-16', 4000),
(6, 7, '2023-12-06', 50000);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity)
VALUES
(1, 1, 1, 1),
(2, 2, 2, 1),
(3, 2, 6, 1),
(4, 3, 3, 1),
(5, 4, 1, 1),
(6, 4, 3, 1),
(7, 5, 5, 1),
(8, 6, 1, 1);

/*---QUERIES----*/
#TASK-2

#Retrieve the names and emails of all customers:
SELECT FirstName, LastName, Email
FROM Customers;

#List all orders with their order dates and corresponding customer names:
SELECT Orders.OrderID, Orders.OrderDate, Customers.FirstName, Customers.LastName
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

#Insert a new customer record into the "Customers" table:
INSERT INTO Customers (FirstName, LastName, Email, Address)
VALUES ('New', 'Customer', 'new.customer@example.com', '123 New St');

#Update the prices of all electronic gadgets in the "Products" table by increasing them by 10%:
UPDATE Products
SET Price = Price * 1.10
WHERE ProductName LIKE '%Headphones%';

#Delete a specific order and its associated order details from the "Orders" and "OrderDetails" tables:
DELETE FROM OrderDetails
WHERE OrderID = 1;
DELETE FROM Orders
WHERE OrderID = 2;

#Insert a new order into the "Orders" table:
INSERT INTO Orders (CustomerID, OrderDate)
VALUES (2, '2024-03-06');

#Update the contact information of a specific customer in the "Customers" table:
UPDATE Customers
SET Email = 'new.email@example.com', Address = '456 Updated St'
WHERE CustomerID = 5;

#Recalculate and update the total cost of each order in the "Orders" table:
UPDATE Orders
SET TotalAmount = (
    SELECT SUM(Quantity * Price)
    FROM OrderDetails
    WHERE OrderDetails.OrderID = Orders.OrderID
)
WHERE OrderID IN (SELECT OrderID FROM OrderDetails);

#Delete all orders and their associated order details for a specific customer:
DELETE FROM OrderDetails
WHERE OrderID IN (SELECT OrderID FROM Orders WHERE CustomerID = 3);

DELETE FROM Orders
WHERE CustomerID = 4;

#Update the status of a specific order in the "Orders" table:
UPDATE Orders
SET Status = 'Shipped'
WHERE OrderID = 4;

#Calculate and update the number of orders placed by each customer in the "Customers" table:
UPDATE Customers
SET TotalOrders = (
    SELECT COUNT(*)
    FROM Orders
    WHERE Orders.CustomerID = Customers.CustomerID
);

/*----Task-3----*/

#Retrieve a list of all orders along with customer information for each order:
SELECT Orders.OrderID, Customers.FirstName, Customers.LastName, Customers.Email, Customers.Phone
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

#Find the total revenue generated by each electronic gadget product:

SELECT Products.ProductName, SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName;

#List all customers who have made at least one purchase:
SELECT FirstName, LastName, Email, Phone
FROM Customers
WHERE CustomerID IN (SELECT DISTINCT CustomerID FROM Orders);

#Find the most popular electronic gadget:
SELECT Products.ProductName, SUM(OrderDetails.Quantity) AS TotalQuantityOrdered
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName
ORDER BY TotalQuantityOrdered DESC
LIMIT 1;

#Retrieve a list of electronic gadgets along with their corresponding categories:
SELECT Products.ProductName, Categories.CategoryName
FROM Products
JOIN Categories ON Products.CategoryID = Categories.CategoryID;

#Calculate the average order value for each customer:
SELECT Customers.FirstName, Customers.LastName, AVG(Orders.TotalAmount) AS AverageOrderValue
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
GROUP BY Customers.CustomerID;

#Find the order with the highest total revenue:
SELECT Orders.OrderID, Customers.FirstName, Customers.LastName, SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Orders.OrderID
ORDER BY TotalRevenue DESC
LIMIT 1;

#List electronic gadgets and the number of times each product has been ordered:
SELECT Products.ProductName, SUM(OrderDetails.Quantity) AS TotalOrders
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductID;

#Find customers who have purchased a specific electronic gadget product:
SELECT Customers.FirstName, Customers.LastName, Customers.Email, Customers.Phone
FROM Customers
JOIN Orders ON Customers.CustomerID = Orders.CustomerID
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
WHERE Products.ProductName = 'laptop';

#Calculate the total revenue generated by all orders placed within a specific time period:
SELECT SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM Orders
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
WHERE Orders.OrderDate BETWEEN '2022-01-16' AND '2024-01-16';


##Tash-4

#Find out which customers have not placed any orders:
SELECT FirstName, LastName, Email, Phone
FROM Customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);

#Find the total number of products available for sale:
SELECT COUNT(*) AS TotalProducts
FROM Products;

#Calculate the total revenue generated by TechShop:
SELECT SUM(TotalAmount) AS TotalRevenue
FROM Orders;

#Calculate the total revenue generated by a specific customer:
SELECT SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM Orders
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
WHERE Orders.CustomerID = 2;